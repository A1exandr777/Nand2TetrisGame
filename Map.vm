function Map.new 1
push constant 4
call Memory.alloc 1
pop pointer 0
push argument 1
push argument 0
call Math.divide 2
pop this 2
push argument 2
push argument 0
call Math.divide 2
pop this 1
push argument 0
pop this 3
push this 1
push this 2
call Math.multiply 2
call Array.new 1
pop this 0
push this 1
push this 2
call Math.multiply 2
push constant 1
sub
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push this 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Map.clear 1
push argument 0
pop pointer 0
push this 1
push this 2
call Math.multiply 2
push constant 1
sub
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push this 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Map.get_cell 0
push argument 0
pop pointer 0
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
pop pointer 1
push that 0
return
function Map.set_cell 0
push argument 0
pop pointer 0
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Map.change_cell 0
push argument 0
pop pointer 0
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
pop pointer 1
push that 0
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
push constant 2
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE0
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
pop pointer 1
push that 0
push constant 2
neg
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
push constant 3
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE1
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
pop pointer 1
push that 0
push constant 3
neg
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 2
push this 2
call Math.multiply 2
push argument 1
add
push this 0
add
push constant 1
neg
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
label IF_FALSE2
push constant 0
return

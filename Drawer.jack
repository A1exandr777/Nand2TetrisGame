class Drawer {
    // размер экрана
    field int w, h;
    // размеры одной клетки, отступ
    field int size, padding;

    constructor Drawer new(int sz, int pad, int wi, int he) {
        let size = sz;
        let padding = pad;
        
        let w = wi;
        let h = he;
        return this;
    }

    // Рисует соответствующие изображения
    method void drawPicture(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, -1);
        do Memory.poke(addr + 32, 0);
        do Memory.poke(addr + 64, -1);
        do Memory.poke(addr + 96, 0);
        do Memory.poke(addr + 128, -1);
        do Memory.poke(addr + 160, 0);
        do Memory.poke(addr + 192, -1);
        do Memory.poke(addr + 224, 0);
        do Memory.poke(addr + 256, -1);
        do Memory.poke(addr + 288, 0);
        do Memory.poke(addr + 320, -1);
        do Memory.poke(addr + 352, 0);
        do Memory.poke(addr + 384, -1);
        do Memory.poke(addr + 416, 0);
        do Memory.poke(addr + 448, -1);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw1(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 3072);
        do Memory.poke(addr + 64, 3072);
        do Memory.poke(addr + 96, 3072);
        do Memory.poke(addr + 128, 3072);
        do Memory.poke(addr + 160, 3072);
        do Memory.poke(addr + 192, 3072);
        do Memory.poke(addr + 224, 3072);
        do Memory.poke(addr + 256, 3072);
        do Memory.poke(addr + 288, 3072);
        do Memory.poke(addr + 320, 3072);
        do Memory.poke(addr + 352, 3072);
        do Memory.poke(addr + 384, 3072);
        do Memory.poke(addr + 416, 3072);
        do Memory.poke(addr + 448, 3072);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw2(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 6144);
        do Memory.poke(addr + 128, 6144);
        do Memory.poke(addr + 160, 6144);
        do Memory.poke(addr + 192, 6144);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 24);
        do Memory.poke(addr + 320, 24);
        do Memory.poke(addr + 352, 24);
        do Memory.poke(addr + 384, 24);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw3(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 6144);
        do Memory.poke(addr + 128, 6144);
        do Memory.poke(addr + 160, 6144);
        do Memory.poke(addr + 192, 6144);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6144);
        do Memory.poke(addr + 320, 6144);
        do Memory.poke(addr + 352, 6144);
        do Memory.poke(addr + 384, 6144);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw4(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 6168);
        do Memory.poke(addr + 64, 6168);
        do Memory.poke(addr + 96, 6168);
        do Memory.poke(addr + 128, 6168);
        do Memory.poke(addr + 160, 6168);
        do Memory.poke(addr + 192, 6168);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6144);
        do Memory.poke(addr + 320, 6144);
        do Memory.poke(addr + 352, 6144);
        do Memory.poke(addr + 384, 6144);
        do Memory.poke(addr + 416, 6144);
        do Memory.poke(addr + 448, 6144);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw5(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 24);
        do Memory.poke(addr + 128, 24);
        do Memory.poke(addr + 160, 24);
        do Memory.poke(addr + 192, 24);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6144);
        do Memory.poke(addr + 320, 6144);
        do Memory.poke(addr + 352, 6144);
        do Memory.poke(addr + 384, 6144);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw6(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 24);
        do Memory.poke(addr + 128, 24);
        do Memory.poke(addr + 160, 24);
        do Memory.poke(addr + 192, 24);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6168);
        do Memory.poke(addr + 320, 6168);
        do Memory.poke(addr + 352, 6168);
        do Memory.poke(addr + 384, 6168);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw7(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 6144);
        do Memory.poke(addr + 128, 6144);
        do Memory.poke(addr + 160, 6144);
        do Memory.poke(addr + 192, 6144);
        do Memory.poke(addr + 224, 6144);
        do Memory.poke(addr + 256, 6144);
        do Memory.poke(addr + 288, 6144);
        do Memory.poke(addr + 320, 6144);
        do Memory.poke(addr + 352, 6144);
        do Memory.poke(addr + 384, 6144);
        do Memory.poke(addr + 416, 6144);
        do Memory.poke(addr + 448, 6144);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw8(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 6168);
        do Memory.poke(addr + 128, 6168);
        do Memory.poke(addr + 160, 6168);
        do Memory.poke(addr + 192, 6168);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6168);
        do Memory.poke(addr + 320, 6168);
        do Memory.poke(addr + 352, 6168);
        do Memory.poke(addr + 384, 6168);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw9(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8184);
        do Memory.poke(addr + 64, 8184);
        do Memory.poke(addr + 96, 6168);
        do Memory.poke(addr + 128, 6168);
        do Memory.poke(addr + 160, 6168);
        do Memory.poke(addr + 192, 6168);
        do Memory.poke(addr + 224, 8184);
        do Memory.poke(addr + 256, 8184);
        do Memory.poke(addr + 288, 6144);
        do Memory.poke(addr + 320, 6144);
        do Memory.poke(addr + 352, 6144);
        do Memory.poke(addr + 384, 6144);
        do Memory.poke(addr + 416, 8184);
        do Memory.poke(addr + 448, 8184);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void draw10(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 8088);
        do Memory.poke(addr + 64, 8088);
        do Memory.poke(addr + 96, 6552);
        do Memory.poke(addr + 128, 6552);
        do Memory.poke(addr + 160, 6552);
        do Memory.poke(addr + 192, 6552);
        do Memory.poke(addr + 224, 6552);
        do Memory.poke(addr + 256, 6552);
        do Memory.poke(addr + 288, 6552);
        do Memory.poke(addr + 320, 6552);
        do Memory.poke(addr + 352, 6552);
        do Memory.poke(addr + 384, 6552);
        do Memory.poke(addr + 416, 8088);
        do Memory.poke(addr + 448, 8088);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void drawCross(int x, int y) {
        var int addr;
        let addr = 16384 + (y * 32 + (x / 16)); 
        do Memory.poke(addr +  0, 0);
        do Memory.poke(addr + 32, 0);
        do Memory.poke(addr + 64, 12300);
        do Memory.poke(addr + 96, 6168);
        do Memory.poke(addr + 128, 3120);
        do Memory.poke(addr + 160, 1632);
        do Memory.poke(addr + 192, 960);
        do Memory.poke(addr + 224, 384);
        do Memory.poke(addr + 256, 960);
        do Memory.poke(addr + 288, 1632);
        do Memory.poke(addr + 320, 3120);
        do Memory.poke(addr + 352, 6168);
        do Memory.poke(addr + 384, 12300);
        do Memory.poke(addr + 416, 8196);
        do Memory.poke(addr + 448, 0);
        do Memory.poke(addr + 480, 0);
        return;
    }

    method void drawLevelStatus(Level level, int id) {
        var int k;
        let k = level.get_level_status(id);
        do Output.printString("level");
        do Output.printInt(id + 1);
        if (k = 0) {
            do Output.printString("...........X");
        }
        if (k = 1) {
            do Output.printString(".....CURRENT");
        }
        if (k = 2) {
            do Output.printString("........DONE");
        }
        do Output.println();
        return;
    }

    method void drawMenu(Level level) {
        do Output.moveCursor(0, 0);
        do drawLevelStatus(level, 0);
        do drawLevelStatus(level, 1);
        do drawLevelStatus(level, 2);
        do drawLevelStatus(level, 3);
        do drawLevelStatus(level, 4);
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.println();
        do Output.printString("1,2,3,4,5 - choose level");
        do Output.println();
        do Output.printString("arrows - move cursor");
        do Output.println();
        do Output.printString("space - paint");
        do Output.println();
        do Output.printString("q - exit");
        return;
    }

    // рисует сетку, на которой мы можем перемещаться курсором
    method void drawGrid (int x, int y, int size, int count) {
        var int x1, y1, xi, yi;
        let x = size * x;
        let y = size * y;
        let xi = x;
        let yi = y;
        let x1 = x + (size * count);
        let y1 = y + (size * count);
        do Screen.setColor(true);
        while (~(xi = x1)) {
            do Screen.drawLine(xi, y, xi, y1 - 1);
            let xi = xi + size;
            do Screen.drawLine(xi - 1, y, xi - 1, y1 - 1);
        }
        while (~(yi = y1)) {
            do Screen.drawLine(x, yi, x1 - 1, yi);
            let yi = yi + size;
            do Screen.drawLine(x, yi - 1, x1 - 1, yi - 1);
        }
        return;
    }
    
    // рисует всю карту
    method void drawMap(int x0, int y0, int cell_count, Map map) {
        var int x, y, k;
    
        var boolean color;
        
        let x = x0 - (cell_count / 2) * size;
        let y = y0 - (cell_count / 2) * size;

        while (~(y = h)) {
            while (~(x = w)) {
                let k = map.get_cell(x / size, y / size);
                if (k = -1) {
                    let color = false;
                    do Screen.setColor(color);
                    if ((x0 - 1 * size < x) & (y0 - 1 * size < y)) {
                        do Screen.drawRectangle(x + padding, y + padding, x + size - 1 - padding, y + size - 1 - padding);
                    }
                    else {
                        do Screen.drawRectangle(x, y, x + size - 1, y + size - 1);
                    }
                    }
                if (k = -2) {
                    let color = true;
                    do Screen.setColor(color);
                    do Screen.drawRectangle(x + padding, y + padding, x + size - 1 - padding, y + size - 1 - padding);
                } 
                if (k = -3) {
                    do drawCross(x, y);
                } 
                if (k = 1) {
                    do draw1(x, y);
                } 
                if (k = 2) {
                    do draw2(x, y);
                } 
                if (k = 3) {
                    do draw3(x, y);
                } 
                if (k = 4) {
                    do draw4(x, y);
                } 
                if (k = 5) {
                    do draw5(x, y);
                } 
                if (k = 6) {
                    do draw6(x, y);
                } 
                if (k = 7) {
                    do draw7(x, y);
                } 
                if (k = 8) {
                    do draw8(x, y);
                } 
                if (k = 9) {
                    do draw9(x, y);
                } 
                if (k = 10) {
                    do draw10(x, y);
                } 
                let x = x + size;
            }
            let x = x0 - (cell_count / 2) * size;
            let y = y + size;
        }
        return;
    }

    // отображение курсора
    method void drawCursor(CursorLogic cursor) {
        var int x, y;
        let x = size * cursor.getX();
        let y = size * cursor.getY();
        
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size - 1, y + size - 1);
        do Screen.setColor(false);
        do Screen.drawRectangle(x + padding, y + padding, x + size - 1 - padding, y + size - 1 - padding);
        return;
    }
    // убрать курсор
    method void eraseCursor(CursorLogic cursor) 
    {
        var int x, y;
        let x = size * cursor.getX();
        let y = size * cursor.getY();
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size - 1, y + size - 1);
        return;
    }
}